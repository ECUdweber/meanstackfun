"use strict";var ApplicationConfiguration=function(){var applicationModuleName="meantest",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.timepicker"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("recipes"),ApplicationConfiguration.registerModule("superheroes"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("recipes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Recipes","recipes","dropdown","/recipes(/create)?"),Menus.addSubMenuItem("topbar","recipes","List Recipes","recipes"),Menus.addSubMenuItem("topbar","recipes","New Recipe","recipes/create")}]),angular.module("recipes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRecipes",{url:"/recipes",templateUrl:"modules/recipes/views/list-recipes.client.view.html"}).state("createRecipe",{url:"/recipes/create",templateUrl:"modules/recipes/views/create-recipe.client.view.html"}).state("viewRecipe",{url:"/recipes/:recipeId",templateUrl:"modules/recipes/views/view-recipe.client.view.html"}).state("editRecipe",{url:"/recipes/:recipeId/edit",templateUrl:"modules/recipes/views/edit-recipe.client.view.html"})}]),angular.module("recipes").controller("RecipesController",["$scope","$stateParams","$location","Authentication","Recipes",function($scope,$stateParams,$location,Authentication,Recipes){$scope.authentication=Authentication,$scope.title="TESTING DIRECTIVE",$scope.subtitle="I am an app",$scope.user={dateOfBirth:new Date(1970,0,1)},$scope.create=function(){var recipe=new Recipes({name:this.name});recipe.$save(function(response){$location.path("recipes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(recipe){if(recipe){recipe.$remove();for(var i in $scope.recipes)$scope.recipes[i]===recipe&&$scope.recipes.splice(i,1)}else $scope.recipe.$remove(function(){$location.path("recipes")})},$scope.update=function(){var recipe=$scope.recipe;recipe.$update(function(){$location.path("recipes/"+recipe._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.recipes=Recipes.query()},$scope.findOne=function(){$scope.recipe=Recipes.get({recipeId:$stateParams.recipeId})}}]),angular.module("recipes").directive("testScopedDirective",[function(){return{scope:!1,link:function($scope,$element,$attrs){$scope.setDirectiveTitle=function(title){$scope.title=title},$scope.setDirectiveSubtitle=function(subtitle){console.log("Setting subtitle..: ",subtitle),$scope.subtitle=subtitle}}}}]),angular.module("recipes").directive("timePicker",[function(){return{scope:!1,link:function($scope,$element,$attrs){$scope.setDirectiveTitle=function(title){$scope.title=title},$scope.setDirectiveSubtitle=function(subtitle){console.log("Setting subtitle..: ",subtitle),$scope.subtitle=subtitle}}}}]),angular.module("recipes").factory("Recipes",["$resource",function($resource){return $resource("recipes/:recipeId",{recipeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("superheroes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Superheroes","superheroes","dropdown","/superheroes(/create)?"),Menus.addSubMenuItem("topbar","superheroes","List Superheroes","superheroes"),Menus.addSubMenuItem("topbar","superheroes","New Superhero","superheroes/create")}]),angular.module("superheroes").config(["$stateProvider",function($stateProvider){$stateProvider.state("team",{url:"/team",templateUrl:"modules/superheroes/views/team.client.view.html"}).state("listSuperheroes",{url:"/superheroes",templateUrl:"modules/superheroes/views/list-superheroes.client.view.html"}).state("createSuperhero",{url:"/superheroes/create",templateUrl:"modules/superheroes/views/create-superhero.client.view.html"}).state("viewSuperhero",{url:"/superheroes/:superheroId",templateUrl:"modules/superheroes/views/view-superhero.client.view.html"}).state("editSuperhero",{url:"/superheroes/:superheroId/edit",templateUrl:"modules/superheroes/views/edit-superhero.client.view.html"})}]),angular.module("superheroes").controller("SuperheroesController",["$scope","$stateParams","$location","Authentication","Superheroes",function($scope,$stateParams,$location,Authentication,Superheroes){$scope.authentication=Authentication,$scope.create=function(){var superhero=new Superheroes({name:this.name,superpower:this.superpower});superhero.$save(function(response){$location.path("superheroes/"+response._id),$scope.name="",$scope.superpower=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(superhero){if(superhero){superhero.$remove();for(var i in $scope.superheroes)$scope.superheroes[i]===superhero&&$scope.superheroes.splice(i,1)}else $scope.superhero.$remove(function(){$location.path("superheroes")})},$scope.update=function(){var superhero=$scope.superhero;superhero.$update(function(){$location.path("superheroes/"+superhero._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.superheroes=Superheroes.query()},$scope.findOne=function(){$scope.superhero=Superheroes.get({superheroId:$stateParams.superheroId})}}]),angular.module("superheroes").controller("TeamController",["$scope",function($scope){}]),angular.module("superheroes").factory("Superheroes",["$resource",function($resource){return $resource("superheroes/:superheroId",{superheroId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);